# -*- coding: utf-8 -*-
"""ML_Assign1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mtla2lPEoZYpPKFDOfLvDsitNWjP3N7Z
"""

#Archita Jain
#102203613
#3CO14

import numpy as np
arr = np.array([1, 2, 3, 6, 4, 5])
rev = np.flip(arr)

print ("Reversed array" , str(rev))

import numpy as np
arr = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])
flatten1 = arr.flatten()                            #flattens row wise

print ("Flattened array " , flatten1)

import numpy as np
arr = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])
flatten2 = arr.flatten('F')                           #flattens column wise

print ("Flattened array " , flatten2)

import numpy as np
arr1 = np.array([[1, 2], [3, 4]])
arr2 = np.array([[1, 2], [3, 4]])

comparison = arr1==arr2
equal_arr = comparison.all()
print (equal_arr)

import numpy as np
x = np.array([1,2,3,4,5,1,2,1,1,1])
y = np.array([1, 1, 1, 2, 3, 4, 2, 4, 3, 3, ])

print ("Array 1 = " , x)
print ("Most common value and its index :")
common = np.bincount(x).argmax()
print(common)
for j in range (len(x)):
  if x[j]==common:
    print(j , end=" ")

print ("\nArray 2 = " , y)
print ("Most common value and its index :")
a = np.bincount(y)
maximum = max(a)

for i in range(len(a)):
    if a[i] == maximum:
        print("\n",i," :" ,end=" ",)
        for j in range(len(y)):
          if y[j]==i:
            print (j , end=" ")

import numpy as np
gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]')

print ("Sum of elements of array : " , np.sum(gfg))                             #numpy.sum(arr, axis, dtype, out) ---> Syntax
print ("Sum of elements of array row wise : " , np.sum(gfg,1))                 #axis = 1 : along row
print ("Sum of elements of array column wise : " , np.sum(gfg,0))                           #axi =  2 : along column

import numpy as np
n_array = np.array([[55, 25, 15],[30, 44, 2],[11, 45, 77]])

trace = np.trace(n_array)                                              # Automatically sums all trace elements
print(n_array)
print("Sum of diagonal elements : ",trace)

value , vector = np.linalg.eig(n_array)                                 #Eigen values and vector
print("\nPrinting the Eigen values of the given array:\n", value)
print("\nPrinting the Eigen vector of the given array:\n", vector)

print ("\nInverse of the matrix : ")                                     #Inverse of matrix
print (np.linalg.inv(n_array))

print ("\nDeterminant of the matrix : ")                                 #Determinant of matrix
print (np.linalg.det(n_array))

import numpy as np
p = np.array([[1, 2], [2, 3]])
q = np.array([[4, 5], [6, 7]])

res = [[0 for x in range(3)] for y in range(3)]                   # Initialize matrix = 0

for i in range(len(p)):
    for j in range(len(q[0])):
        for k in range(len(q)):

            res[i][j] += p[i][k] * q[k][j]

print (res)

print ("Covariance between matrices :")
print(np.cov(p,q))

import numpy as np
p1 = np.array([[1, 2], [2, 3], [4, 5]])
q1 = np.array([[4, 5, 1], [6, 7, 2]])

res = [[0 for x in range(3)] for y in range(3)]                   # Initialize matrix = 0

for i in range(len(p1)):
    for j in range(len(q1[0])):
        for k in range(len(q1)):

            res[i][j] += p1[i][k] * q1[k][j]

print (res)

#print ("Covariance between matrices :")
#print(np.cov(p1,q1))                                             #--> Error...no covariance

import numpy as np
x = np.array([[2, 3, 4], [3, 2, 9]])
y = np.array([[1, 5, 0], [5, 10, 3]])

print("Inner product of vectors =")
print(np.inner(x, y))

print("Outer product of vectors =")
print(np.outer(x, y))

print("Cross/cartesian product of vectors =")
print(np.cross(x, y))

import numpy as np
array = np.array([[1, -2, 3],[-4, 5, -6]])

print("Absolute value",np.absolute(array))

print("Flattened array with 50 percentile" , np.percentile(array, 50))
print ("For each column with 25 percentile" , np.percentile(array, 25, axis=0))
print ("For each row with 75 percentile" , np.percentile(array, 75, axis=1))


flattened_array = array.flatten()

print("\nFlattened Mean",np.mean(flattened_array))                                    # Mean, median, and standard deviation of the flattened array
print("Flattened Median",np.median(flattened_array))
print("Flattened Std Deviation" ,np.std(flattened_array))

print("\nMean for each column",np.mean(array, axis=0))                                 # Mean, median, and standard deviation of each column
print("Median for each column",np.median(array, axis=0))
print("Std Deviation for each column",np.std(array, axis=0))

print("\nMean for each row",np.mean(array, axis=1))                   # Mean, median, and standard deviation of each row
print("Median for each row",np.median(array, axis=1))
print("Std Deviation for each row",np.std(array, axis=1))

import numpy as np
a = np.array([-1.8, -1.6, -0.5, 0.5,1.6, 1.8, 3.0])

print ("Floor values : " , np.floor(a))
print ("Ceiling values : " , np.ceil(a))
print ("Truncate values : " , np.trunc(a))
print ("Round values : " , np.around(a))

import numpy as np
array = np.array([10, 52, 62, 16, 16, 54, 453])
arr =np.sort(array)
print (arr)
for i in range (len(arr)):
  for j in range (len(array)):
    if arr[i]==array[j]:
      print (j, end = " ")

print ("\n4 smallest elements : ")
print (arr[:4])

print ("\n5 largest elements : ")
print (arr[len(arr)-5:])

import numpy as np
array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])

result = array[~np.equal(np.mod(array, 1), 0)]
print ("Float array : ", str(result))

integer = array==array.astype(int)
elements = array[integer]
print("\n Integer array",elements)

import numpy as np
from PIL import Image

def img_to_array(path):
  img = Image.open(path)                                #open the image

  if img.mode == 'RGB':                                 #If image is RGB type
    img_array = np.array(img)
    filename = "image_array_rgb.txt"

  elif img.mode == 'L':                                 #If image is Grayscale type
    img_array = np.array(img)
    filename = "image_array_greyscales.txt"

  else:
    raise ValueError("Unsupported image mode: {}".format(img.mode))

  np.savetxt(filename, img_array.flatten(), fmt='%d')
  print(f"The image array has been saved to {filename}")

  img_to_array("path_to_your_image.jpg")